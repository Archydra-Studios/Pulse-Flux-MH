plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "CottonMC"
		url = "http://server.bbkr.space:8081/artifactory/libs-release"
	}
	maven {
		name = "Modmenu"
		url = "https://maven.fabricmc.net/io/github/prospector/modmenu/"
	}
	maven {
		name = "dblsaiko"
		url = "https://maven.dblsaiko.net/"
	}
	maven {
		name = "Cotton"
		url = "http://server.bbkr.space:8081/artifactory/libs-release/"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
	maven {
		name = "AperLambda"
		url = 'https://aperlambda.github.io/maven'
	}
	maven {
		url = "https://dl.bintray.com/orangemonkey68/mods"
	}
	maven {
		url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
	}

	jcenter()
}

dependencies {

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation(include("io.github.cottonmc:LibGui:${project.libgui_version}"))
	modImplementation(include("io.github.ladysnake:Satin:${project.satin_version}"))
	modApi(include("me.shedaniel.cloth:config-2:${project.clothconfig_version}")){
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation( include(group: 'net.devtech', name: 'arrp', version: '0.2.6'))

	//Testing only, do not JiJ
	modImplementation "io.github.prospector:modmenu:1.14.6+build.31"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	modImplementation( include("me.orangemonkey68:injectable-recipes:${project.repinject_version}"))
    //modCompile "grondag:canvas-mc116:1.0.+"
}

minecraft {
	accessWidener "src/main/resources/pulseflux.accesswidener"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
